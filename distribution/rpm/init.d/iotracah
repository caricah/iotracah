#!/bin/sh
#
# iotracah <summary>
#
# chkconfig:   2345 80 20
# description: Starts and stops an iotracah instance on this system
#

### BEGIN INIT INFO
# Provides: IOTracah
# Required-Start: $network $named
# Required-Stop: $network $named
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: @packaging.project.summary@
# Description: @packaging.project.description@
### END INIT INFO

#
# init.d / servicectl compatibility (openSUSE)
#
if [ -f /etc/rc.status ]; then
    . /etc/rc.status
    rc_reset
fi

#
# Source function library.
#
if [ -f /etc/rc.d/init.d/functions ]; then
    . /etc/rc.d/init.d/functions
fi

# Sets the default values for iotracah variables used in this script
IOT_USER="@packaging.iotracah.user@"
IOT_GROUP="@packaging.iotracah.group@"
IOT_HOME="@packaging.iotracah.home.dir@"
MAX_OPEN_FILES=@packaging.os.max.open.files@
MAX_MAP_COUNT=@packaging.os.max.map.count@
LOG_DIR="@packaging.iotracah.log.dir@"
DATA_DIR="@packaging.iotracah.data.dir@"
CONF_DIR="@packaging.tmp_iotracah.conf.dir@"

PID_DIR="@packaging.iotracah.pid.dir@"

# Source the default env file
IOT_ENV_FILE="@packaging.env.file@"
if [ -f "$IOT_ENV_FILE" ]; then
    . "$IOT_ENV_FILE"
fi

exec="$IOT_HOME/bin/iotracah"
prog="iotracah"
pidfile="$PID_DIR/${prog}.pid"

export IOT_HEAP_SIZE
export IOT_HEAP_NEWSIZE
export IOT_DIRECT_SIZE
export IOT_JAVA_OPTS
export IOT_GC_LOG_FILE
export JAVA_HOME

lockfile=/var/lock/subsys/$prog

# backwards compatibility for old config sysconfig files, pre 0.90.1
if [ -n $USER ] && [ -z $IOT_USER ] ; then 
   IOT_USER=$USER
fi

checkJava() {
    if [ -x "$JAVA_HOME/bin/java" ]; then
        JAVA="$JAVA_HOME/bin/java"
    else
        JAVA=`which java`
    fi

    if [ ! -x "$JAVA" ]; then
        echo "Could not find any executable java binary. Please install java in your PATH or set JAVA_HOME"
        exit 1
    fi
}

start() {
    checkJava
    [ -x $exec ] || exit 5
    if [ -n "$MAX_LOCKED_MEMORY" -a -z "$IOT_HEAP_SIZE" ]; then
        echo "MAX_LOCKED_MEMORY is set - IOT_HEAP_SIZE must also be set"
        return 7
    fi
    if [ -n "$MAX_OPEN_FILES" ]; then
        ulimit -n $MAX_OPEN_FILES
    fi
    if [ -n "$MAX_LOCKED_MEMORY" ]; then
        ulimit -l $MAX_LOCKED_MEMORY
    fi
    if [ -n "$MAX_MAP_COUNT" -a -f /proc/sys/vm/max_map_count ]; then
        sysctl -q -w vm.max_map_count=$MAX_MAP_COUNT
    fi
    export IOT_GC_LOG_FILE

    # Ensure that the PID_DIR exists (it is cleaned at OS startup time)
    if [ -n "$PID_DIR" ] && [ ! -e "$PID_DIR" ]; then
        mkdir -p "$PID_DIR" && chown "$IOT_USER":"$IOT_GROUP" "$PID_DIR"
    fi
    if [ -n "$pidfile" ] && [ ! -e "$pidfile" ]; then
        touch "$pidfile" && chown "$IOT_USER":"$IOT_GROUP" "$pidfile"
    fi

    cd $IOT_HOME
    echo -n $"Starting $prog: "
    # if not running, start it up here, usually something like "daemon $exec"
    daemon --user $IOT_USER --pidfile $pidfile $exec -p $pidfile -d -Des.default.path.home=$IOT_HOME -Des.default.path.logs=$LOG_DIR -Des.default.path.data=$DATA_DIR -Des.default.path.conf=$CONF_DIR
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    # stop it here, often "killproc $prog"
    killproc -p $pidfile -d @packaging.iotracah.stopping.timeout@ $prog
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    # run checks to determine if the service is running or use generic status
    status -p $pidfile $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
