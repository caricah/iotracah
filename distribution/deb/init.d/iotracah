#!/bin/sh
#
# /etc/init.d/iotracah -- startup script for 
#
# Written by Miquel van Smoorenburg <miquels@cistron.nl>.
# Modified for Debian GNU/Linux	by Ian Murdock <imurdock@gnu.ai.mit.edu>.
# Modified for Tomcat by Stefan Gybas <sgybas@debian.org>.
# Modified for Tomcat6 by Thierry Carrez <thierry.carrez@ubuntu.com>.
# Additional improvements by Jason Brittain <jason.brittain@mulesoft.com>.
# Modified by Nicolas Huray for Elasticsearch <nicolas.huray@gmail.com>.
# Modified by Peter J. Bwire for iotracah <bwire@caricah.com>.
#
### BEGIN INIT INFO
# Provides:          iotracah
# Required-Start:    $network $remote_fs $named
# Required-Stop:     $network $remote_fs $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: @packaging.project.summary@
# Description:       @packaging.project.description@
### END INIT INFO

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=iotracah
DESC="iotracah Server"
DEFAULT=@packaging.env.file@

if [ `id -u` -ne 0 ]; then
	echo "You need root privileges to run this script"
	exit 1
fi


. /lib/lsb/init-functions

if [ -r /etc/default/rcS ]; then
	. /etc/default/rcS
fi


# The following variables can be overwritten in $DEFAULT

# Run iotracah as this user ID and group ID
IOT_USER=@packaging.iotracah.user@
IOT_GROUP=@packaging.iotracah.group@

# Directory where the iotracah binary distribution resides
IOT_HOME=@packaging.iotracah.home.dir@

# Heap size defaults to 256m min, 1g max
# Set IOT_HEAP_SIZE to 50% of available RAM, but no more than 31g
#IOT_HEAP_SIZE=2g

# Heap new generation
#IOT_HEAP_NEWSIZE=

# max direct memory
#IOT_DIRECT_SIZE=

# Additional Java OPTS
#IOT_JAVA_OPTS=

# Maximum number of open files
MAX_OPEN_FILES=@packaging.os.max.open.files@

# Maximum amount of locked memory
#MAX_LOCKED_MEMORY=

# iotracah log directory
LOG_DIR=@packaging.iotracah.log.dir@

# iotracah data directory
DATA_DIR=@packaging.iotracah.log.dir@

# iotracah configuration directory
CONF_DIR=@packaging.iotracah.conf.dir@

# Maximum number of VMA (Virtual Memory Areas) a process can own
MAX_MAP_COUNT=@packaging.os.max.map.count@

# iotracah PID file directory
PID_DIR="@packaging.iotracah.pid.dir@"

# End of variables that can be overwritten in $DEFAULT

# overwrite settings from default file
if [ -f "$DEFAULT" ]; then
	. "$DEFAULT"
fi

# Define other required variables
PID_FILE="$PID_DIR/$NAME.pid"
DAEMON=$IOT_HOME/bin/iotracah
DAEMON_OPTS="-d -p $PID_FILE --default.path.home=$IOT_HOME --default.path.logs=$LOG_DIR --default.path.data=$DATA_DIR --default.path.conf=$CONF_DIR"

export IOT_HEAP_SIZE
export IOT_HEAP_NEWSIZE
export IOT_DIRECT_SIZE
export IOT_JAVA_OPTS
export ES_GC_LOG_FILE
export JAVA_HOME

# Check DAEMON exists
test -x $DAEMON || exit 0

checkJava() {
	if [ -x "$JAVA_HOME/bin/java" ]; then
		JAVA="$JAVA_HOME/bin/java"
	else
		JAVA=`which java`
	fi

	if [ ! -x "$JAVA" ]; then
		echo "Could not find any executable java binary. Please install java in your PATH or set JAVA_HOME"
		exit 1
	fi
}

case "$1" in
  start)
	checkJava

	if [ -n "$MAX_LOCKED_MEMORY" -a -z "$IOT_HEAP_SIZE" ]; then
		log_failure_msg "MAX_LOCKED_MEMORY is set - IOT_HEAP_SIZE must also be set"
		exit 1
	fi

	log_daemon_msg "Starting $DESC"

	pid=`pidofproc -p $PID_FILE iotracah`
	if [ -n "$pid" ] ; then
		log_begin_msg "Already running."
		log_end_msg 0
		exit 0
	fi

	# Prepare environment
	mkdir -p "$LOG_DIR" "$DATA_DIR" && chown "$IOT_USER":"$IOT_GROUP" "$LOG_DIR" "$DATA_DIR"

	# Ensure that the PID_DIR exists (it is cleaned at OS startup time)
	if [ -n "$PID_DIR" ] && [ ! -e "$PID_DIR" ]; then
		mkdir -p "$PID_DIR" && chown "$IOT_USER":"$IOT_GROUP" "$PID_DIR"
	fi
	if [ -n "$PID_FILE" ] && [ ! -e "$PID_FILE" ]; then
		touch "$PID_FILE" && chown "$IOT_USER":"$IOT_GROUP" "$PID_FILE"
	fi

	if [ -n "$MAX_OPEN_FILES" ]; then
		ulimit -n $MAX_OPEN_FILES
	fi

	if [ -n "$MAX_LOCKED_MEMORY" ]; then
		ulimit -l $MAX_LOCKED_MEMORY
	fi

	if [ -n "$MAX_MAP_COUNT" -a -f /proc/sys/vm/max_map_count ]; then
		sysctl -q -w vm.max_map_count=$MAX_MAP_COUNT
	fi

	# Start Daemon
	start-stop-daemon -d $IOT_HOME --start -b --user "$IOT_USER" -c "$IOT_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS
	return=$?
	if [ $return -eq 0 ]; then
		i=0
		timeout=10
		# Wait for the process to be properly started before exiting
		until { cat "$PID_FILE" | xargs kill -0; } >/dev/null 2>&1
		do
			sleep 1
			i=$(($i + 1))
			if [ $i -gt $timeout ]; then
				log_end_msg 1
				exit 1
			fi
		done
	fi
	log_end_msg $return
	exit $return
	;;
  stop)
	log_daemon_msg "Stopping $DESC"

	if [ -f "$PID_FILE" ]; then
		start-stop-daemon --stop --pidfile "$PID_FILE" \
			--user "$IOT_USER" \
			--quiet \
			--retry forever/TERM/20 > /dev/null
		if [ $? -eq 1 ]; then
			log_progress_msg "$DESC is not running but pid file exists, cleaning up"
		elif [ $? -eq 3 ]; then
			PID="`cat $PID_FILE`"
			log_failure_msg "Failed to stop $DESC (pid $PID)"
			exit 1
		fi
		rm -f "$PID_FILE"
	else
		log_progress_msg "(not running)"
	fi
	log_end_msg 0
	;;
  status)
	status_of_proc -p $PID_FILE iotracah iotracah && exit 0 || exit $?
	;;
  restart|force-reload)
	if [ -f "$PID_FILE" ]; then
		$0 stop
		sleep 1
	fi
	$0 start
	;;
  *)
	log_success_msg "Usage: $0 {start|stop|restart|force-reload|status}"
	exit 1
	;;
esac

exit 0
